#include <WiFi.h>
#include <WebServer.h>
#include <Adafruit_NeoPixel.h>

 //ステーションモード設定
#define SSID "led_wifi"
#define PASSWORD "00000000" 
const char *ssid = SSID;
const char *password = PASSWORD;
WebServer server(80);

// LEDテープ設定
#define PIN        21  // M5Stack Grobe Pin
#define NUMPIXELS  256  // Enough for 29 LEDs
#define DELAYVAL  10  // Time (in milliseconds) to pause between pixels
int led_color[3][3] ={{10,0,0},{0,10,0},{0,0,10}};
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int matselect = 1;
bool isPending = true;


byte mat1[256][3] = {{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0},{31,0,0}};
byte mat2[256][3] = {{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31},{0,0,31}};
byte mat3[256][3] = {{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31},{31,31,31}};

void handleRoot() {
  server.send(200, "text/html", "<h1>Please access /mat1, /mat2 or /mat3</h1>");  
}


void handleMat1() {
  matselect = 1;
  isPending = true;
  Serial.println("MAT1");
  server.send(200, "text/html", "LED ON");  
}

void handleMat2() {
  matselect = 2;
  isPending = true;
  Serial.println("MAT2");
  server.send(200, "text/html", "LED ON");  
}

void handleMat3() {
  matselect = 0;
  isPending = true;
  Serial.println("MAT3");
  server.send(200, "text/html", "LED OFF");  
}

void setup() {
  delay(1000);
  Serial.begin(115200);
  
  // WiFiステーションモード
WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.print("Connecred to ");
  Serial.println(ssid);
  Serial.print("IP address");
  Serial.println(WiFi.localIP());

  // LEDテープ設定
  pixels.begin();
  
  server.on("/", handleRoot);
  server.on("/mat1", handleMat1);
  server.on("/mat2", handleMat2);
  server.on("/mat3", handleMat3);
  server.begin();
}

void loop() {
  server.handleClient();
  if(isPending) {
    if(matselect == 1) {
      pixels.clear();
      for(int i=0; i<NUMPIXELS; i++) {
        int rgb = i%3;
        pixels.setPixelColor(i, pixels.Color(mat1[i][0],mat1[i][1],mat1[i][2]));
        pixels.show();
        delay(DELAYVAL);
      }
    } else if(matselect == 2) {
      pixels.clear();
      for(int i=0; i<NUMPIXELS; i++) {
        int rgb = i%3;
        pixels.setPixelColor(i, pixels.Color(mat2[i][0],mat2[i][1],mat2[i][2]));
        pixels.show();
        delay(DELAYVAL);
    }
    } else {
      pixels.clear();
      for(int i=0; i<NUMPIXELS; i++) {
        int rgb = i%3;
        pixels.setPixelColor(i, pixels.Color(mat3[i][0],mat3[i][1],mat3[i][2]));
        pixels.show();
        delay(DELAYVAL);
      }
    }
  }
  isPending = false;
}
